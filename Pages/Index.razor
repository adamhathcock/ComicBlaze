@page "/"
@using Tewr.Blazor.FileReader

@inject IFileReaderService FileReaderService;


<Modal @ref="_modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <ModalBody>
            Loading @PageInfo ...
        </ModalBody>
    </ModalContent>
</Modal>
<input type="file" @ref="_inputTypeFileElement" @oninput=ReadFile/>
<Buttons Margin="Margin.Is2.FromRight">
    <Button Color="Color.Primary" @onclick="Previous">Previous Page</Button>
    <Button Color="Color.Secondary" @onclick="Home">Home</Button>
    <Button Color="Color.Primary" @onclick="Next">Next Page</Button>
</Buttons>
@if (_reader != null)
{
    <Figure>
        <FigureImage Source=@ComicBytes onactivate="Event" onfocus="Event" onloadeddata=Event />
    </Figure>
}

@code
{
    public string ComicBytes { get; set; }
    public string PageInfo { get; set; }

    private int _currentPage;
    private Modal _modalRef;
    private ElementReference _inputTypeFileElement;
    private ComicReader _reader;

    private void Event(EventArgs e)
    {
        Console.WriteLine(e.GetType().ToString());
    }

    private async Task ReadFile()
    {
        var file = (await FileReaderService.CreateReference(_inputTypeFileElement).EnumerateFilesAsync()).FirstOrDefault();
        if (file is null)
        {
            return;
        }
        try
        {
            var stream = await file.CreateMemoryStreamAsync();
            _reader = new ComicReader(stream);
            await LoadPage(0);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task LoadPage(int page)
    {
        PageInfo = _reader.GetPageInfo(page);
        _modalRef.Show();
        if (page < 0)
        {
            return;
        }
        if (page >= _reader.Count)
        {
            return;
        }
        _currentPage = page;
        ComicBytes = $"data:image/jpg;base64,{await _reader.GetPage(page)}";
        _modalRef.Hide();
    }

    public async Task Home()
    {
        await LoadPage(0);
    }

    private async Task Next()
    {
        await LoadPage(++_currentPage);
    }

    private async Task Previous()
    {
        await LoadPage(--_currentPage);
    }
}